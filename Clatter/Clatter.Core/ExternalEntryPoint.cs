using System;

namespace Clatter.Core
{
    /// <summary>
    /// A convenient entry point for external (non-C#) applications for generating single-event Clatter audio.
    ///
    /// This class necessarily offers a subset of Clatter's full functionality. If you're programming in a C# and/or Unity context, don't use this class! Use the rest of the Clatter API instead.
    /// </summary>
    public static class ExternalEntryPoint
    {
        /// <summary>
        /// Generate audio. Returns a byte array of int16 data.
        /// </summary>
        /// <param name="primaryImpactMaterial">The primary object's impact material as a byte. Use the numerical values found in the `ImpactMaterial` document.</param>
        /// <param name="primaryAmp">The primary object's amp (0 to 1). This affects the overall loudness of audio generated by this object.</param>
        /// <param name="primaryResonance">The primary object's resonance (0 to 1). This affects the decay times of audio generated by this object.</param>
        /// <param name="primaryMass">The primary object's mass in kilograms.</param>
        /// <param name="secondaryImpactMaterial">The secondary object's impact material as a byte. Use the numerical values found in the `ImpactMaterial` document.</param>
        /// <param name="secondaryAmp">The secondary object's amp (0 to 1). This affects the overall loudness of audio generated by this object.</param>
        /// <param name="secondaryResonance">The secondary object's resonance (0 to 1). This affects the decay times of audio generated by this object.</param>
        /// <param name="secondaryMass">The secondary object's mass in kilograms.</param>
        /// <param name="speed">The speed of the collision in meters per second.</param>
        /// <param name="audioEventType">The audio event type. Use the numerical values found in the `AudioEventType` document.</param>
        /// <param name="scrapeMaterial">The scrape material. This is used only if the audio event is a scrape. Use the numerical values found in the `ScrapeMaterial` document.</param>
        /// <param name="duration">The duration of the event is seconds. This is used only if the audio event is a scrape.</param>
        /// <param name="hasSeed">If true, use the random seed below. If false, the random seed is random.</param>
        /// <param name="seed">The random seed. This is used only if hasSeed == true.</param>
        /// <param name="simulationAmp">The overall amplitude of the simulation. The amplitude of generated audio is scaled by this factor. Must be between 0 and 0.99. In most cases, set this to 0.9.</param>
        /// <param name="scrapeMaxSpeed">For the purposes of scrape audio generation, the collision speed is clamped to this maximum value in meters per second. In most cases, set this to 5.</param>
        /// <param name="preventDistortion">If true, clamp an impact's audio amplitude values to less than or equal to 0.99, preventing distortion. In most cases, set this to true.</param>
        /// <param name="clampContactTime">If true, clamp an impact's contact time to a plausible value. Set this to false if you want to generate impacts with unusually long contact times. In most cases, set this to true.</param>
        /// <param name="framerate">The audio samples framerate. In most cases, set this to 44100</param>
        public static byte[] GetAudio(byte primaryImpactMaterial, double primaryAmp, double primaryResonance, double primaryMass,
            byte secondaryImpactMaterial, double secondaryAmp, double secondaryResonance, double secondaryMass,
            double speed, byte audioEventType, byte scrapeMaterial, double duration, bool hasSeed, int seed,
            double simulationAmp, double scrapeMaxSpeed, bool preventDistortion, bool clampContactTime, int framerate)
        {
            // Set static variables.
            AudioEvent.simulationAmp = simulationAmp.Clamp(0, 0.99);
            Scrape.maxSpeed = scrapeMaxSpeed;
            Impact.preventDistortion = preventDistortion;
            Impact.clampContactTime = clampContactTime;
            Globals.framerate = framerate;
            Globals.framerateD = framerate;
            // Get the impact materials.
            ImpactMaterial p = GetImpactMaterial(primaryImpactMaterial);
            ImpactMaterial s = GetImpactMaterial(secondaryImpactMaterial);
            // Get the objects.
            ClatterObjectData primary = new ClatterObjectData(0, p, primaryAmp, primaryResonance, primaryMass);
            ClatterObjectData secondary = new ClatterObjectData(1, s, secondaryAmp, secondaryResonance, secondaryMass);
            // Get the random number generator.
            Random rng;
            if (hasSeed)
            {
                rng = new Random(seed);
            }
            else
            {
                rng = new Random();
            }
            AudioEventType type = (AudioEventType)audioEventType;
            byte[] audio = Array.Empty<byte>();
            // Generate impact audio.
            if (type == AudioEventType.impact)
            {
                Impact impact = new Impact(primary, secondary, rng);
                // Generate audio.
                bool ok = impact.GetAudio(speed);
                if (ok)
                {
                    audio = impact.samples.ToInt16Bytes();
                }
            }
            else if (type == AudioEventType.scrape)
            {
                // Load the scrape material.
                ScrapeMaterial sm = (ScrapeMaterial)scrapeMaterial;
                ScrapeMaterialData.Load(sm);
                // Set the speed of the primary object.
                primary.speed = speed;
                // Get the number of scrape events.
                int count = Scrape.GetNumScrapeEvents(duration);
                // Get the scrape.
                Scrape scrape = new Scrape(secondary.scrapeMaterial, primary, secondary, new Random());
                audio = new byte[Scrape.SAMPLES_LENGTH * 2 * count];
                int c = Scrape.SAMPLES_LENGTH * 2;
                for (int i = 0; i < count; i++)
                {
                    // Continue the scrape.
                    scrape.GetAudio(speed);
                    // Get the audio and copy it to the buffer.
                    Buffer.BlockCopy(scrape.samples.ToInt16Bytes(), 0, audio, i * c, c);
                }
            }
            // Return the samples.
            return audio;
        }
        
        
        
        /// <summary>
        /// Load and return an impact material.
        /// </summary>
        /// <param name="impactMaterialByte">The byte value of the impact material.</param>
        private static ImpactMaterial GetImpactMaterial(byte impactMaterialByte)
        {
            ImpactMaterial impactMaterial = (ImpactMaterial)impactMaterialByte;
            ImpactMaterialData.Load(impactMaterial);
            return impactMaterial;
        }
    }
}