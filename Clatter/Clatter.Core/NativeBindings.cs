/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#pragma warning disable IDE0044, IDE0049, IDE0055, IDE1006,
#pragma warning disable SA1004, SA1008, SA1023, SA1028,
#pragma warning disable SA1121, SA1134,
#pragma warning disable SA1201,
#pragma warning disable SA1300, SA1306, SA1307, SA1310, SA1313,
#pragma warning disable SA1500, SA1505, SA1507,
#pragma warning disable SA1600, SA1601, SA1604, SA1605, SA1611, SA1615, SA1649,

namespace ClatterRs {
using System;
using System.Runtime.InteropServices;

public unsafe partial class Ffi {
    private const string RustLib = "clatter_rs";
}

/// <summary>
/// Same as [<c>Vec<T></c>][<c>rust::Vec</c>], but with guaranteed <c>#[repr(C)]</c> layout
/// </summary>
[StructLayout(LayoutKind.Sequential, Size = 24)]
public unsafe struct Vec_double_t {
    public double * ptr;

    public UIntPtr len;

    public UIntPtr cap;
}

[StructLayout(LayoutKind.Sequential, Size = 136)]
public unsafe struct MedianFilter_t {
    public Vec_double_t buffer;

    public Vec_double_t offset_buffer_1;

    public Vec_double_t offset_buffer_2;

    public Vec_double_t offset_buffer_3;

    public Vec_double_t offset_buffer_4;

    public UIntPtr offset;

    [MarshalAs(UnmanagedType.U1)]
    public bool full;
}

[StructLayout(LayoutKind.Sequential, Size = 56)]
public unsafe struct ScrapeMaterialData_t {
    public double roughness_ratio;

    public Vec_double_t dsdx;

    public Vec_double_t d2sdx2;
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void get_impact (
        double max_t,
        double framerate,
        [MarshalAs(UnmanagedType.U1)]
        bool prevent_distortion,
        double * amp,
        UIntPtr impulse_response_length,
        Vec_double_t /*const*/ * impulse_response,
        Vec_double_t * samples);
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    UIntPtr get_scrape (
        double primary_mass,
        double scrape_speed,
        double max_speed,
        double simulation_amp,
        double scrape_amp,
        UIntPtr num_points,
        UIntPtr scrape_index,
        ScrapeMaterialData_t /*const*/ * scrape_material,
        Vec_double_t /*const*/ * impulse_response,
        Vec_double_t * linear_space,
        Vec_double_t * force,
        MedianFilter_t * median_filter,
        Vec_double_t * samples);
}

public unsafe partial class Ffi {
    /// <summary>
    /// No-op to let the C# library check if it can load this library.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void is_ok ();
}

public unsafe partial class Ffi {
    /// <summary>
    /// Synthesize a sinusoid from mode data.
    ///
    /// - <c>power</c> The mode onset powers in dB.
    /// - <c>decay</c> The mode decay time i.e. the time in ms it takes for this mode to decay 60dB from its onset power.
    /// - <c>frequency</c> The mode frequency in Hz.
    /// - <c>resonance</c> The object's resonance value.
    /// - <c>mode_count</c> The actual length of the sinusoid.
    /// - <c>framerate</c> The audio framerate.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void mode_sinusoid (
        double power,
        double decay,
        double frequency,
        double resonance,
        UIntPtr mode_count,
        double framerate,
        Vec_double_t * mode);
}


} /* ClatterRs */
