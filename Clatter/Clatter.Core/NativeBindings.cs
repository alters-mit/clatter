/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#pragma warning disable IDE0044, IDE0049, IDE0055, IDE1006,
#pragma warning disable SA1004, SA1008, SA1023, SA1028,
#pragma warning disable SA1121, SA1134,
#pragma warning disable SA1201,
#pragma warning disable SA1300, SA1306, SA1307, SA1310, SA1313,
#pragma warning disable SA1500, SA1505, SA1507,
#pragma warning disable SA1600, SA1601, SA1604, SA1605, SA1611, SA1615, SA1649,

namespace ClatterRs {
using System;
using System.Runtime.InteropServices;

public unsafe partial class Ffi {
    private const string RustLib = "clatter_rs";
}

/// <summary>
/// Same as [<c>Vec<T></c>][<c>rust::Vec</c>], but with guaranteed <c>#[repr(C)]</c> layout
/// </summary>
[StructLayout(LayoutKind.Sequential, Size = 24)]
public unsafe struct Vec_double_t {
    public double * ptr;

    public UIntPtr len;

    public UIntPtr cap;
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void ffi_convolve (
        Vec_double_t /*const*/ * input,
        Vec_double_t /*const*/ * kernel,
        Vec_double_t * output,
        UIntPtr length);
}

public unsafe partial class Ffi {
    /// <summary>
    /// No-op to let the C# library check if it can load this library.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void is_ok ();
}


} /* ClatterRs */
